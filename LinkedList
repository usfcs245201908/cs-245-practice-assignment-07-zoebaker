public class LinkedList <T> implements List <T> {

    Node head = null;
    int size = 0;

    private class Node{
        T data;
        Node next;

        Node(T item){
            data = item;
            next = null;
        }
    }

    //adds item to end of the linked list
    public void add (T item){
        if (head == null){
            head = new Node(item);
            size ++;
        }
        else{
            Node prev=head;
            while (prev.next != null){
                prev = prev.next;
            }
            prev.next= new Node(item);
            size++;
        }
    }

    public void add (int pos, T item){
        if (pos +1 > size || pos < 0)
            throw new IndexOutOfBoundsException();
        if (pos == 0){
            Node node = new Node(item);
            node.next = head;
            head = node;
            size ++;
        }
        else {
            Node prev = head;
            for (int i =0; i < pos-1; i++)
                prev = prev.next;
            Node node = new Node(item);
            node.next=prev.next;
            prev.next=node;
            size ++;
        }
    }

    public T remove (int pos){
        if (pos +1 > size || pos < 0)
            throw new IndexOutOfBoundsException();
        if(pos ==0 ){
            Node remNode = head;
            head = head.next;
            size --;
            return remNode.data;
        }
        else{
            Node prev = head;
            for (int i = 0; i < pos-1; i++){
                prev = prev.next;
            }
            Node remNode = prev.next;
            size --;
            return remNode.data;
        }
    }


    public T get (int pos) {
       if (pos < 0 || pos > size)
           throw new IndexOutOfBoundsException();
        Node prev = head;
        for (int i = 0; i< pos-1; i++)
             prev = prev.next;

        return prev.data;
    }

    public int size(){
        return size;
    }
}


